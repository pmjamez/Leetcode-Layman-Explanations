//Leetcode Easy, problem 1, two Sum ... First solution will be brute force, Second solution will involve a hash-map


//PROBLEM: 
//Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
//You may assume that each input would have exactly one solution, and you may not use the same element twice.

//You can return the answer in any order.



//Pseudocode thinking. A brute force approach can check every possible combination of elements in the array to see if they add up to target. 
//One way to do this is to use two for loops (one nested) to check every combination. Then placing an IF statement to see whether or not 
//a solution is available. One solution to check for two numbers that add up to target is to have the nested for loop look for a complement 
//number such that the complement and any given element within the array add up to target. This complement can be calculated by subtracted 
//that element from target, so it would look like target - whichever element is selected.
class BFSolution {
    public int[] twoSum(int[] nums, int target) {
        
        for (int i = 0; i < nums.length; i++){
        //This first for loop iterates through the entire array
        
            for(int j = i + 1; j < nums.length; j++){
            //This for loop checks every other element in the array, except for i
            //The following code will be run across the rest of the elements, except for i
            //This ensures every combination will be checked, and also makes sure that the same element is not used twice
            
                int complement = target - nums[i];
                //We create a new int named complement so that our next piece of code knows which number to look for.
                //As per the problem, we must find two numbers that add up to a given target
                //If the first number is some number in the array, the other number that adds up to target will be the target - that first number.
                if(nums[j] == complement){
                //Because this is in the second for loop, every other number besides i will be checked whether or not it matches the complement
                    return new int[]  { i , j };
                    //This returns the indices of the numbers that add up to target, as per the instructions
                }
            }
        }
        throw new IllegalArgumentException("No Match Found!");
        //In this Leetcode problem, it is assumed that a solution will always exist, but in real world, it's safe to throw exceptions if there isn't any matches
    }
    
    //In summary, this solution makes use of two FOR loops. Given an array size of 5 elements, the most operations performed would be 25. 
    //This is because the first FOR loop iterates through the array, giving us 5 operations, and then the second FOR loop iterates 
    //through every other element for each of the first FOR loop's operations. Giving us 5*5. In big O(n), this would mean that this solution's
    //time complexity is O(n^2). Although this solution is not the best time wise, it is a great exercise for teaching us how to navigate
    //iterative problems.
}

//Why should we learn Data Structures & Algorithms? Well, one answer is that it can teach us new ways to think, break down problems, and solve them.
//Although this code works, it is very slow. We need to find a solution with a faster time complexity. Making use of what we learned in DS&A, 
//We can use a Hashmap to store the elements in the array. Since Hashmaps have constant time look-up, this would greatly reduce our time complexity.


//Pseudocode thinking: Although we are using a hashmap to reduce the time complexity, we still would need a For loop to run through each element of the array
//We must also initialize the array before writing the For loop. Inside the For loop, our code can look pretty similar in that we are looking for a complement 
//of the target.

//Here is a solution that uses a Hashmap:
class HSMPSolution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> num_map = new HashMap<>();
        //Initialize the Integer hashmap
        
        for (int i = 0; i < nums.length; i++){
        //Iterates through each element of the array
            int complement = target - nums[i];
            //Defining the complement so our next piece of code knows what to look for
            
            if(num_map.containsKey(complement)){
            //This if statement checks for the complement, using code for the hashmap
                return new int[] { i, num_map.get(complement) };
                //If true, this line of code returns a new array of the selected element and complement.
                
            }
            num_map.put(nums[i], i);
            //Places elements of the array into the hashmap
        }
        throw new IllegalArgumentException("No Match Found!");
        //Just in case there are no solutions
    }
}
//The time complexity of this solution is o(n). Adding up all the operations, the For loop, if statement, and hashmap look up, we get o(n) * o(1) * o(1). We 
//still need a For loop to iterate through each element of the array and since the rest of the code is constant (hashmap and if), we get a final time
//complexity of o(n). 

//As you can see, this Leetcode Easy problem is a great demonstration of why to learn Data Structures & Algorithms. We applied a different train of thought 
//in order to solve a problem, reduce its time complexity, and learned how to solve difficult problems. This is perhaps one of my favorite leetcode problems!
