//Problem: Given an integer n, return a string array answer (1-indexed) where:

//answer[i] == "FizzBuzz" if i is divisible by 3 and 5.
//answer[i] == "Fizz" if i is divisible by 3.
//answer[i] == "Buzz" if i is divisible by 5.
//answer[i] == i (as a string) if none of the above conditions are true.

//Ah, the good ol' Fizzbuzz problem. This problem makes great use of the modulo operator. The modulo, or mod, or "%" returns the remainder of
//an integer after division. For example, 7 mod 2 = 1, 22 mod 11 = 0, etc. Essentially this problem asks us to create an Array of Strings
//that contains a list of integers and the words Fizz, Buzz, and FizzBuzz based on their conditions. So if an integer is divisible by 3, 
//"Fizz" will show up where 3, 6 , 9, 12, etc would be. Essentially this array shows us which numbers are divisible by 3, 5, or 3 and 5. 

class Solution {
    public List<String> fizzBuzz(int n) {
        List<String> list = new ArrayList<>(); //initialize the ArrayList of strings
        for (int i = 1; i <= n; i++) { // iterates based on int n (how big they want the array list to be)
        
        //Now we just add a bunch of IF statements to see if the numbers are divisible. We determine whether or not the numbers are divisible 
        //if the numbers modulo 3,5,3 or 5, return 0. This is because having no remainder means an integer is divisible by that number.
        //For example, 6 mod 3 = 0, therefore, 6 is divisible by 3, and we would return "Fizz"
            if (i % 3 == 0 && i % 5 == 0) { 
                list.add("FizzBuzz"); //Adds to the list if it is there
            } else if (i % 3 == 0) {
                list.add("Fizz");
            } else if (i % 5 == 0) {
                list.add("Buzz");
            } else {
                list.add(String.valueOf(i)); //Adds the remaining integers that are not divisible by the set requirements. 
            }
        }
        return list; //returns the final list
    }
}
